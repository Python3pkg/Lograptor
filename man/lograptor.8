.TH "lograptor" "8" "1.0" "Davide Brunato" "Applications/System"

.SH NAME
\fBlograptor\fR \- Search and reporting tool for syslog files.

.SH SYNOPSIS
\fBlograptor\fR [options] [PATTERN] [FILE ...]

\fBlograptor\fR [options] [ -e PATTERN | -f FILE ] [FILE ...]

.SH DESCRIPTION
Lograptor is a search tool for system logs saved with legacy BSD syslog format
(RFC 3164) or IETF syslog format (RFC 5424).
It is developed as a compact and highly configurable CLI tool for analysis and
reporting of system logs. Lograptor is derived from ideas and partly 
from the code of Epylog, merged with older code written by the author for parsing 
a Postfix email server logs.

The program mix a classical pattern search as the UNIX command "grep" with
additional filters and parameters, taylored to restrict and retrieve relevant
informations from log files. For example you could restrict a search to an
hostname or to a date. Configurable filters can be applied on message data.
Each application is defined with a configuration file. 
Lograptor can also produce reports and publish them in a directory or send
by e-mail. The report may be a general or a specific report taylored for
some accounts/hosts. With cron you could run Lograptor to produce general 
reports.

Lograptor log analysis is based on application or device that originated the 
message. This reflect the structure of syslog lines, as described in details 
by RFC 5424 (see paragraph 6.2.5 APP-NAME).

.SH OPTIONS
.B \-\^\-version
show program's version number and exit
.B \-h, \-\-help
show this help message and exit
.SS "General Options"
.TP
.B \-\^\-conf=<CONFIG_FILE>
Provide a different configuration to Lograptor, alternative to
the default file located in /etc/lograptor/lograptor.conf.
.TP
.B \-d [0-4]
Logging level. The default is 1. Level 0 log only critical errors, higher levels show more informations..TP
.B \-\-cron
Run as a batch/cron job, with no output and enabling reporting, plus it 
will create a lock file that will not allow more than one cron instance
of lograptor to run.

.SS "Scope Options"
.TP
.B \-H HOST/IP[,HOST/IP...], \-\-host=HOST/IP[,HOST/IP...]
Will analyze only log lines related to comma separated list of hostnames and/or IP addresses.
File path wildcards can be used for hostnames.
.TP
.B \-a APP[,APP...], \-\-apps=APP[,APP...]
Will analyze only log lines related to a specific application. 
An application list should be passed between quotes, separated by
commas or spaces.
.TP
.B \-A, \-\-no-apps
Skip application processing. The searches are performed only 
with pattern(s) matching. This option is incompatible with
report, filtering and thread matching options.
.TP
.B \-\-last=[hour|day|week|month|Nh|Nd|Nw|Nm]
Will analyze strings from the past [time period] specified.
.TP
.B \-\-date=[YYYY]MMDD[,[YYYY]MMDD]
Will analyze only log lines related to a date. You should provide a
date interval, with consecutive dates separated by a comma.
.TP
.B \-\-time\-range=HH:MM,HH:MM, \-\-tr=HH:MM,HH:MM
Will analyze only log lines related to a time range.

.SS "Filtering Options"
.TP
.B \-\-user=<PATTERN>
Restrict search to log lines related to a username pattern.
.TP
.B \-\-from=<PATTERN>
Restrict search to log lines related to a RFC822 address pattern.
.TP
.B \-\-rcpt=<RFC822_ADDRESS>, \-\-to=<RFC822_ADDRESS>
Search only in the log lines related to a recipient address.
.TP
.B \-\-client=<HOSTNAME/IP ADDRESS>
Search only in the log lines related to a client host.
.TP
.B \-\-pid=<NUM>
Search only in the log lines related to a process ID.
.TP
.B \--and
Treat filters conditions with logical conjunction (AND) [default: logical disjunction (OR)]

.SS "Matching Control"
.TP
.B \-e PATTERN, --regexp=PATTERN
The search pattern. Useful to protect a pattern beginning with a hypen (-).
.TP
.B \-f FILE, --file=FILE
Obtain multiple patterns from FILE, one per line.
.TP
.B \-i, --ignore-case
Ignore case distinctions in matching.
.TP
.B \-v, --invert-match
Invert the sense of matching, to select non-matching lines.
.TP
.B \-t, --thread
The matching is at thread/connection level, not per line. Thread matching depends
by application and it's definition in the configuration file. The thread association
among log lines is done with an ID field (example: for postfix use queue IDs).

.SS "Output Control"
.TP
.B \-c, --count
Suppress normal output; instead print a count of matching lines
for each input file. With the -v, --invert-match option, 
count non-matching lines.
.TP
.B \-q, --quiet
Quiet; do not write anything to standard output. Exit immediately
with zero status if any match is found, even if an error was
detected. Also see the -s or --no-messages option.
.TP
.B \-s, --no-messages
Suppress error messages about nonexistent or unreadable files.
.TP
.B \-o, --with-filename
Print the filename for each match line, instead print filename ad the beginning of file analysis.
.TP
.B \-O, --no-filename
Don't print filenames at the beginning of each file parsing process. This is the
default behaviour also when is passed only one file with the arguments.

.SS "Report Control"
.TP
.B \-r, --report
Make a report at the end of processing and print it on console as plain text.
.TP
.B \-R [html|csv|plain], --format=[html|csv|plain]
Make and publish the report in the specified format, using the publishers
described and enabled in the configuration file. This option is mutually
exclusive with -r option.
.TP
.B \-p [<PUBLISHER>|"<PUBLISHER>, ..."], --publishers=[<PUBLISHER>|"<PUBLISHER>, ..."]
Use a specific list of publishers rather than the one
defined in the configuration file. This option is 
ignored if report is disabled, ie neither option -r 
nor -R/--report is passed.
.TP
.B \-u, --unparsed
Force inclusion of unparsed logs (max 1000 lines) in
report. Useful for application's rules debugging. This
option is ignored if report is disabled, ie neither
option -r nor -R/--report is passed.
.TP
.B \--ip
Do a reverse lookup for IP addresses. Nothing is done if the no report is required.
.TP
.B \--uid
Translate uids with system interface. Nothing is done if no report is required.

.SH "FEATURES"
Lograptor is written in python. It is compahandles things like
timestamp lookups, unwrapping of "last message repeated" lines,
handling of rotated files, preparing and publishing the reports, etc.

Lograptor is derived from the ideas and the code of Epylog package and
from a small search utility for email servers logfiles. It was developed 
 with python 2.6+ and python 3, in order to be projected for future improvements.  

The application are simply a configuration files added in a specific
configuration directory. Application's configuration files containg rules
for log parsing and for composing reports. For more info see
\fBlograptor-apps(5)\fR.

.SH "FILES"
.LP 
.I /etc/lograptor/lograptor.conf
.br
.I /etc/lograptor/conf.d/*.conf
.br
.I /usr/bin/lograptor

.SH "EXAMPLES"
.LP 
.SS "Basic pattern search"
.TP
Search a pattern in specific log file:

lograptor "hello" /var/log/messages

.TP
Same search but ignoring characters case:

lograptor -i "hello" /var/log/messages

.TP
Search a string in postfix's log files of the last 3 days: 

lograptor --last=3d -a postfix "example.com" 

.TP
Search of mail sent by an address, with match at connection thread level:

lograptor -t --from=user@example.com "" /var/log/maillog

.LP
.SS "Making reports"
.TP
Produce a report on console for application "crond": 

lograptor -ra crond "" /var/log/cron

.TP
The same but produce an HTML report and publish it with default publishers, including unparsed logs:

lograptor -R html -ua crond "" /var/log/cron

.SH "AUTHORS"
.LP 
Davide Brunato <brunato@sissa.it>

.SH "SEE ALSO"
.LP 
lograptor.conf(5), lograptor-apps(5)
